{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nexport var getPosts = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var k, res, ids;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            k = [];\n            _context2.prev = 1;\n            _context2.next = 4;\n            return axios.get(\"https://simple-blog-api.crew.red/posts\");\n\n          case 4:\n            res = _context2.sent;\n            ids = res.data.map(function (post) {\n              return post.id;\n            });\n            _context2.next = 8;\n            return Promise.all(ids.map( /*#__PURE__*/function () {\n              var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(elem) {\n                var content;\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.next = 2;\n                        return axios({\n                          method: \"GET\",\n                          url: \"https://simple-blog-api.crew.red/posts/\".concat(elem),\n                          params: {\n                            _embed: \"comments\"\n                          }\n                        });\n\n                      case 2:\n                        content = _context.sent;\n                        console.log(content.data);\n                        return _context.abrupt(\"return\", content.data);\n\n                      case 5:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n              return function (_x) {\n                return _ref2.apply(this, arguments);\n              };\n            }()));\n\n          case 8:\n            _context2.next = 13;\n            break;\n\n          case 10:\n            _context2.prev = 10;\n            _context2.t0 = _context2[\"catch\"](1);\n            console.log(_context2.t0);\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[1, 10]]);\n  }));\n\n  return function getPosts() {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/home/nik/projects/js/next-blog/lib/api.ts"],"names":["axios","getPosts","k","get","res","ids","data","map","post","id","Promise","all","elem","method","url","params","_embed","content","console","log"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAKA,OAAO,IAAMC,QAAQ;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAClBC,YAAAA,CADkB,GACN,EADM;AAAA;AAAA;AAAA,mBAGAF,KAAK,CAACG,GAAN,0CAHA;;AAAA;AAGZC,YAAAA,GAHY;AAIZC,YAAAA,GAJY,GAIAD,GAAG,CAACE,IAAJ,CAASC,GAAT,CAAa,UAACC,IAAD;AAAA,qBAAUA,IAAI,CAACC,EAAf;AAAA,aAAb,CAJA;AAAA;AAAA,mBAKZC,OAAO,CAACC,GAAR,CACJN,GAAG,CAACE,GAAJ;AAAA,mFAAQ,iBAAOK,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACgBZ,KAAK,CAAC;AAC1Ba,0BAAAA,MAAM,EAAE,KADkB;AAE1BC,0BAAAA,GAAG,mDAA4CF,IAA5C,CAFuB;AAG1BG,0BAAAA,MAAM,EAAE;AACNC,4BAAAA,MAAM,EAAE;AADF;AAHkB,yBAAD,CADrB;;AAAA;AACAC,wBAAAA,OADA;AAQNC,wBAAAA,OAAO,CAACC,GAAR,CAAYF,OAAO,CAACX,IAApB;AARM,yDASCW,OAAO,CAACX,IATT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAR;;AAAA;AAAA;AAAA;AAAA,gBADI,CALY;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAmBlBY,YAAAA,OAAO,CAACC,GAAR;;AAnBkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAARlB,QAAQ;AAAA;AAAA;AAAA,GAAd","sourcesContent":["import axios from 'axios'\nimport {PostType, Posts} from './types'\n\ntype Id = {id: number}\ntype Ids = Id[]\nexport const getPosts = async() => {\n  let k : Posts = []\n    try {\n      const res = await axios.get(`https://simple-blog-api.crew.red/posts`);\n      const ids : Ids = res.data.map((post) => post.id);\n      await Promise.all(\n        ids.map(async (elem) => {\n          const content = await axios({\n            method: \"GET\",\n            url: `https://simple-blog-api.crew.red/posts/${elem}`,\n            params: {\n              _embed: \"comments\",\n            },\n          });\n          console.log(content.data)\n          return content.data\n        })\n      )\n    } catch (e) {\n      console.log(e);\n    }\n\n  };"]},"metadata":{},"sourceType":"module"}
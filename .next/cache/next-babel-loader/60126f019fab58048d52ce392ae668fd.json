{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(commentWorkerSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { takeEvery, call, put } from \"redux-saga/effects\";\nimport { createComment, addComment, apiError } from './store/store';\nimport { postComment } from '../lib/api';\n\nfunction commentWorkerSaga(action) {\n  var res;\n  return _regeneratorRuntime.wrap(function commentWorkerSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(postComment, action.payload);\n\n        case 3:\n          res = _context.sent;\n          _context.next = 6;\n          return put(addComment(res));\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put(apiError(_context.t0));\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nexport function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(createComment, commentWorkerSaga);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["/home/nik/projects/js/next-blog/redux/sagas.ts"],"names":["commentWorkerSaga","rootSaga","takeEvery","call","put","createComment","addComment","apiError","postComment","action","payload","res"],"mappings":";;oDAKUA,iB;qDAUOC,Q;;AAfjB,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,QAAqC,oBAArC;AAEA,SAAQC,aAAR,EAAmCC,UAAnC,EAA8CC,QAA9C,QAA6D,eAA7D;AACA,SAAQC,WAAR,QAA0B,YAA1B;;AAEA,SAAUR,iBAAV,CAA4BS,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEoB,iBAAMN,IAAI,CAACK,WAAD,EAAcC,MAAM,CAACC,OAArB,CAAV;;AAFpB;AAEcC,UAAAA,GAFd;AAAA;AAGQ,iBAAMP,GAAG,CAACE,UAAU,CAACK,GAAD,CAAX,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAMQ,iBAAMP,GAAG,CAACG,QAAQ,aAAT,CAAT;;AANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUA,OAAO,SAAUN,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAMC,SAAS,CAACG,aAAD,EAAgBL,iBAAhB,CAAf;;AADG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { takeEvery, call, put } from \"redux-saga/effects\";\nimport {Comment, RawComment} from '../lib/types'\nimport {createComment, createPost, addComment,apiError} from './store/store'\nimport {postComment} from '../lib/api'\n\nfunction* commentWorkerSaga(action) {\n    try {\n        const res = yield call(postComment, action.payload)\n        yield put(addComment(res))\n    }\n    catch(e) {\n        yield put(apiError(e))\n    }\n}\n\nexport function* rootSaga() {\n    yield takeEvery(createComment, commentWorkerSaga);\n}"]},"metadata":{},"sourceType":"module"}
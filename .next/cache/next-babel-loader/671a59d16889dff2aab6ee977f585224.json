{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport axios from \"axios\";\nexport var getPosts = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var res, ids;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return axios.get(\"https://simple-blog-api.crew.red/posts\");\n\n          case 2:\n            res = _context2.sent;\n            ids = res.data.map(function (post) {\n              return post.id;\n            });\n            _context2.next = 6;\n            return Promise.all(ids.map( /*#__PURE__*/function () {\n              var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(elem) {\n                var content;\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.next = 2;\n                        return axios({\n                          method: \"GET\",\n                          url: \"https://simple-blog-api.crew.red/posts/\".concat(elem),\n                          params: {\n                            _embed: \"comments\"\n                          }\n                        });\n\n                      case 2:\n                        content = _context.sent;\n                        return _context.abrupt(\"return\", content.data);\n\n                      case 4:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n              return function (_x) {\n                return _ref2.apply(this, arguments);\n              };\n            }()));\n\n          case 6:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getPosts() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var postComment = function postComment(comment) {\n  return axios({\n    method: \"POST\",\n    url: \"https://simple-blog-api.crew.red/comments\",\n    data: _objectSpread({}, comment)\n  }).then(function (res) {\n    return res.data;\n  });\n};\nexport var postPost = function postPost(post) {\n  return axios({\n    method: \"POST\",\n    url: \"https://simple-blog-api.crew.red/posts\",\n    data: _objectSpread({}, post)\n  }).then(function (res) {\n    return res.data;\n  });\n};","map":{"version":3,"sources":["/home/nik/projects/js/next-blog/lib/api.ts"],"names":["axios","getPosts","get","res","ids","data","map","post","id","Promise","all","elem","method","url","params","_embed","content","postComment","comment","then","postPost"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAIA,OAAO,IAAMC,QAAQ;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACJD,KAAK,CAACE,GAAN,0CADI;;AAAA;AAChBC,YAAAA,GADgB;AAEhBC,YAAAA,GAFgB,GAELD,GAAG,CAACE,IAAJ,CAASC,GAAT,CAAa,UAACC,IAAD;AAAA,qBAAUA,IAAI,CAACC,EAAf;AAAA,aAAb,CAFK;AAAA;AAAA,mBAGTC,OAAO,CAACC,GAAR,CACXN,GAAG,CAACE,GAAJ;AAAA,mFAAQ,iBAAOK,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACgBX,KAAK,CAAC;AAC1BY,0BAAAA,MAAM,EAAE,KADkB;AAE1BC,0BAAAA,GAAG,mDAA4CF,IAA5C,CAFuB;AAG1BG,0BAAAA,MAAM,EAAE;AACNC,4BAAAA,MAAM,EAAE;AADF;AAHkB,yBAAD,CADrB;;AAAA;AACAC,wBAAAA,OADA;AAAA,yDAQCA,OAAO,CAACX,IART;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAR;;AAAA;AAAA;AAAA;AAAA,gBADW,CAHS;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAARJ,QAAQ;AAAA;AAAA;AAAA,GAAd;AAiBP,OAAO,IAAMgB,WAAW,GAAG,SAAdA,WAAc,CAACC,OAAD,EAAyB;AAClD,SAAOlB,KAAK,CAAC;AACXY,IAAAA,MAAM,EAAE,MADG;AAEXC,IAAAA,GAAG,EAAE,2CAFM;AAGXR,IAAAA,IAAI,oBACCa,OADD;AAHO,GAAD,CAAL,CAMJC,IANI,CAMC,UAAChB,GAAD;AAAA,WAASA,GAAG,CAACE,IAAb;AAAA,GAND,CAAP;AAOD,CARM;AAUP,OAAO,IAAMe,QAAQ,GAAG,SAAXA,QAAW,CAACb,IAAD,EAAmB;AACzC,SAAOP,KAAK,CAAC;AACXY,IAAAA,MAAM,EAAE,MADG;AAEXC,IAAAA,GAAG,EAAE,wCAFM;AAGXR,IAAAA,IAAI,oBACCE,IADD;AAHO,GAAD,CAAL,CAMJY,IANI,CAMC,UAAChB,GAAD;AAAA,WAASA,GAAG,CAACE,IAAb;AAAA,GAND,CAAP;AAOD,CARM","sourcesContent":["import axios from \"axios\";\nimport { Posts } from \"./types\";\nimport { Ids, RawComment, RawPost } from \"./types\";\n\nexport const getPosts = async () => {\n  const res = await axios.get(`https://simple-blog-api.crew.red/posts`);\n  const ids: Ids = res.data.map((post) => post.id);\n  return await Promise.all<Posts>(\n    ids.map(async (elem) => {\n      const content = await axios({\n        method: \"GET\",\n        url: `https://simple-blog-api.crew.red/posts/${elem}`,\n        params: {\n          _embed: \"comments\",\n        },\n      });\n      return content.data;\n    })\n  );\n};\n\nexport const postComment = (comment: RawComment) => {\n  return axios({\n    method: \"POST\",\n    url: \"https://simple-blog-api.crew.red/comments\",\n    data: {\n      ...comment,\n    },\n  }).then((res) => res.data);\n};\n\nexport const postPost = (post: RawPost) => {\n  return axios({\n    method: \"POST\",\n    url: \"https://simple-blog-api.crew.red/posts\",\n    data: {\n      ...post,\n    },\n  }).then((res) => res.data);\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { createAction, configureStore, createReducer, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { rootSaga } from \"../sagas\";\nvar initialiseSagaMiddleware = createSagaMiddleware();\nvar middleware = [].concat(_toConsumableArray(getDefaultMiddleware()), [initialiseSagaMiddleware]);\nexport var getAllPosts = createAction(\"getPosts\");\nexport var createComment = createAction(\"createComment\");\nexport var createPost = createAction(\"createPost\");\nexport var addPost = createAction(\"addPost\");\nexport var addComment = createAction(\"addComment\");\nexport var apiError = createAction(\"apiErrored\");\nvar defaulState = {\n  posts: [],\n  error: null\n};\nvar rootReducer = createReducer(defaulState, function (builder) {\n  builder.addCase(getAllPosts, function (state, action) {\n    var _state$posts;\n\n    (_state$posts = state.posts).push.apply(_state$posts, _toConsumableArray(action.payload));\n  }).addCase(addComment, function (state, action) {\n    var pid = state.posts.findIndex(function (post) {\n      return post.id === action.payload.postId;\n    });\n    state.posts[pid].comments.push(action.payload);\n  }).addCase(addPost, function (state, action) {\n    state.posts.push(action.payload);\n  }).addCase(apiError, function (state, action) {\n    state.error = action.payload;\n  });\n});\nexport var store = configureStore({\n  reducer: rootReducer,\n  middleware: middleware\n});\ninitialiseSagaMiddleware.run(rootSaga);","map":{"version":3,"sources":["/home/nik/projects/js/next-blog/redux/store/store.ts"],"names":["createAction","configureStore","createReducer","getDefaultMiddleware","createSagaMiddleware","rootSaga","initialiseSagaMiddleware","middleware","getAllPosts","createComment","createPost","addPost","addComment","apiError","defaulState","posts","error","rootReducer","builder","addCase","state","action","push","payload","pid","findIndex","post","id","postId","comments","store","reducer","run"],"mappings":";AAAA,SACEA,YADF,EAEEC,cAFF,EAGEC,aAHF,EAIEC,oBAJF,QAKO,kBALP;AAMA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAASC,QAAT,QAAyB,UAAzB;AAGA,IAAMC,wBAAwB,GAAGF,oBAAoB,EAArD;AACA,IAAMG,UAAU,gCAAOJ,oBAAoB,EAA3B,IAA+BG,wBAA/B,EAAhB;AAEA,OAAO,IAAME,WAAW,GAAGR,YAAY,CAAQ,UAAR,CAAhC;AACP,OAAO,IAAMS,aAAa,GAAGT,YAAY,CAAa,eAAb,CAAlC;AACP,OAAO,IAAMU,UAAU,GAAGV,YAAY,CAAU,YAAV,CAA/B;AACP,OAAO,IAAMW,OAAO,GAAGX,YAAY,CAAW,SAAX,CAA5B;AACP,OAAO,IAAMY,UAAU,GAAGZ,YAAY,CAAU,YAAV,CAA/B;AACP,OAAO,IAAMa,QAAQ,GAAGb,YAAY,CAAS,YAAT,CAA7B;AAOP,IAAMc,WAAkB,GAAG;AACzBC,EAAAA,KAAK,EAAE,EADkB;AAEzBC,EAAAA,KAAK,EAAE;AAFkB,CAA3B;AAKA,IAAMC,WAAW,GAAGf,aAAa,CAACY,WAAD,EAAc,UAACI,OAAD,EAAa;AAC1DA,EAAAA,OAAO,CACJC,OADH,CACWX,WADX,EACwB,UAACY,KAAD,EAAQC,MAAR,EAAmB;AAAA;;AACvC,oBAAAD,KAAK,CAACL,KAAN,EAAYO,IAAZ,wCAAoBD,MAAM,CAACE,OAA3B;AACD,GAHH,EAIGJ,OAJH,CAIWP,UAJX,EAIuB,UAACQ,KAAD,EAAQC,MAAR,EAAmB;AACtC,QAAMG,GAAG,GAAGJ,KAAK,CAACL,KAAN,CAAYU,SAAZ,CACV,UAACC,IAAD;AAAA,aAAUA,IAAI,CAACC,EAAL,KAAYN,MAAM,CAACE,OAAP,CAAeK,MAArC;AAAA,KADU,CAAZ;AAGAR,IAAAA,KAAK,CAACL,KAAN,CAAYS,GAAZ,EAAiBK,QAAjB,CAA0BP,IAA1B,CAA+BD,MAAM,CAACE,OAAtC;AACD,GATH,EAUGJ,OAVH,CAUWR,OAVX,EAUoB,UAACS,KAAD,EAAOC,MAAP,EAAkB;AAClCD,IAAAA,KAAK,CAACL,KAAN,CAAYO,IAAZ,CAAiBD,MAAM,CAACE,OAAxB;AACD,GAZH,EAaGJ,OAbH,CAaWN,QAbX,EAaqB,UAACO,KAAD,EAAQC,MAAR,EAAmB;AACpCD,IAAAA,KAAK,CAACJ,KAAN,GAAcK,MAAM,CAACE,OAArB;AACD,GAfH;AAgBD,CAjBgC,CAAjC;AAmBA,OAAO,IAAMO,KAAK,GAAG7B,cAAc,CAAC;AAAE8B,EAAAA,OAAO,EAAEd,WAAX;AAAwBV,EAAAA,UAAU,EAAVA;AAAxB,CAAD,CAA5B;AACPD,wBAAwB,CAAC0B,GAAzB,CAA6B3B,QAA7B","sourcesContent":["import {\n  createAction,\n  configureStore,\n  createReducer,\n  getDefaultMiddleware,\n} from \"@reduxjs/toolkit\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { rootSaga } from \"../sagas\";\nimport { RawComment, Comment, Posts,PostType,RawPost } from \"../../lib/types\";\n\nconst initialiseSagaMiddleware = createSagaMiddleware();\nconst middleware = [...getDefaultMiddleware(), initialiseSagaMiddleware];\n\nexport const getAllPosts = createAction<Posts>(\"getPosts\");\nexport const createComment = createAction<RawComment>(\"createComment\");\nexport const createPost = createAction<RawPost>(\"createPost\");\nexport const addPost = createAction<PostType>(\"addPost\")\nexport const addComment = createAction<Comment>(\"addComment\");\nexport const apiError = createAction<string>(\"apiErrored\");\n\nexport type State = {\n  posts: Posts;\n  error: string | null;\n};\n\nconst defaulState: State = {\n  posts: [],\n  error: null,\n};\n\nconst rootReducer = createReducer(defaulState, (builder) => {\n  builder\n    .addCase(getAllPosts, (state, action) => {\n      state.posts.push(...action.payload);\n    })\n    .addCase(addComment, (state, action) => {\n      const pid = state.posts.findIndex(\n        (post) => post.id === action.payload.postId\n      );\n      state.posts[pid].comments.push(action.payload);\n    })\n    .addCase(addPost, (state,action) => {\n      state.posts.push(action.payload)\n    })\n    .addCase(apiError, (state, action) => {\n      state.error = action.payload;\n    });\n});\n\nexport const store = configureStore({ reducer: rootReducer, middleware });\ninitialiseSagaMiddleware.run(rootSaga);\n"]},"metadata":{},"sourceType":"module"}
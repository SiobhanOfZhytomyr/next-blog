{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(commentWorkerSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(postWorkerSaga),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(commentSaga),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { takeEvery, call, put, all } from \"redux-saga/effects\";\nimport { createComment, createPost, addComment, apiError, addPost } from './store/store';\nimport { postComment, postPost } from '../lib/api';\n\nfunction commentWorkerSaga(action) {\n  var res;\n  return _regeneratorRuntime.wrap(function commentWorkerSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(postComment, action.payload);\n\n        case 3:\n          res = _context.sent;\n          _context.next = 6;\n          return put(addComment(res));\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put(apiError(_context.t0));\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction postWorkerSaga(action) {\n  var res, prep;\n  return _regeneratorRuntime.wrap(function postWorkerSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(postPost, action.payload);\n\n        case 3:\n          res = _context2.sent;\n          prep = _objectSpread(_objectSpread({}, res), {}, {\n            comments: []\n          });\n          _context2.next = 7;\n          return put(addPost(prep));\n\n        case 7:\n          _context2.next = 13;\n          break;\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 13;\n          return put(apiError(_context2.t0));\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 9]]);\n}\n\nfunction postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeEvery(createPost, postWorkerSaga);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction commentSaga() {\n  return _regeneratorRuntime.wrap(function commentSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(createComment, commentWorkerSaga);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([postSaga(), commentSaga()]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/home/nik/projects/js/next-blog/redux/sagas.ts"],"names":["commentWorkerSaga","postWorkerSaga","postSaga","commentSaga","rootSaga","takeEvery","call","put","all","createComment","createPost","addComment","apiError","addPost","postComment","postPost","action","payload","res","prep","comments"],"mappings":";;;;;;;oDAKUA,iB;qDAUAC,c;qDAWAC,Q;qDAIAC,W;qDAIOC,Q;;AAlCjB,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,GAA/B,QAA0C,oBAA1C;AAEA,SAAQC,aAAR,EAAuBC,UAAvB,EAAmCC,UAAnC,EAA8CC,QAA9C,EAAuDC,OAAvD,QAAqE,eAArE;AACA,SAAQC,WAAR,EAAqBC,QAArB,QAAoC,YAApC;;AAEA,SAAUf,iBAAV,CAA4BgB,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEoB,iBAAMV,IAAI,CAACQ,WAAD,EAAcE,MAAM,CAACC,OAArB,CAAV;;AAFpB;AAEcC,UAAAA,GAFd;AAAA;AAGQ,iBAAMX,GAAG,CAACI,UAAU,CAACO,GAAD,CAAX,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAMQ,iBAAMX,GAAG,CAACK,QAAQ,aAAT,CAAT;;AANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUA,SAAUX,cAAV,CAAyBe,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEoB,iBAAMV,IAAI,CAACS,QAAD,EAAWC,MAAM,CAACC,OAAlB,CAAV;;AAFpB;AAEcC,UAAAA,GAFd;AAGcC,UAAAA,IAHd,mCAGyBD,GAHzB;AAG8BE,YAAAA,QAAQ,EAAE;AAHxC;AAAA;AAIQ,iBAAMb,GAAG,CAACM,OAAO,CAACM,IAAD,CAAR,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOQ,iBAAMZ,GAAG,CAACK,QAAQ,cAAT,CAAT;;AAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWA,SAAUV,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMG,SAAS,CAACK,UAAD,EAAaT,cAAb,CAAf;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUE,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAME,SAAS,CAACI,aAAD,EAAgBT,iBAAhB,CAAf;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,OAAO,SAAUI,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAMI,GAAG,CAAC,CACNN,QAAQ,EADF,EAENC,WAAW,EAFL,CAAD,CAAT;;AADG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { takeEvery, call, put, all } from \"redux-saga/effects\";\nimport {Comment, RawComment} from '../lib/types'\nimport {createComment, createPost, addComment,apiError,addPost} from './store/store'\nimport {postComment, postPost} from '../lib/api'\n\nfunction* commentWorkerSaga(action) {\n    try {\n        const res = yield call(postComment, action.payload)\n        yield put(addComment(res))\n    }\n    catch(e) {\n        yield put(apiError(e))\n    }\n}\n\nfunction* postWorkerSaga(action){\n    try {\n        const res = yield call(postPost, action.payload)\n        const prep = {...res, comments: []}\n        yield put(addPost(prep))\n    }\n    catch(e) {\n        yield put(apiError(e))\n    }\n}\n\nfunction* postSaga() {\n    yield takeEvery(createPost, postWorkerSaga);\n}\n\nfunction* commentSaga() {\n    yield takeEvery(createComment, commentWorkerSaga);\n}\n\nexport function* rootSaga(){\n    yield all([\n        postSaga(),\n        commentSaga()\n      ])\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { createAction, configureStore, createReducer, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { rootSaga } from \"../sagas\";\nconst initialiseSagaMiddleware = createSagaMiddleware();\nconst middleware = [...getDefaultMiddleware(), initialiseSagaMiddleware];\nexport const getAllPosts = createAction(\"getPosts\");\nexport const createComment = createAction(\"createComment\");\nexport const createPost = createAction(\"createPost\");\nexport const addPost = createAction(\"addPost\");\nexport const addComment = createAction(\"addComment\");\nexport const apiError = createAction(\"apiErrored\");\nconst defaulState = {\n  posts: [],\n  error: null\n};\nconst rootReducer = createReducer(defaulState, builder => {\n  builder.addCase(getAllPosts, (state, action) => {\n    state.posts.push(...action.payload);\n  }).addCase(addComment, (state, action) => {\n    const pid = state.posts.findIndex(post => post.id === action.payload.postId);\n    state.posts[pid].comments.push(action.payload);\n  }).addCase(addPost, (state, action) => {\n    state.posts.push(action.payload);\n  }).addCase(apiError, (state, action) => {\n    state.error = action.payload;\n  });\n});\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware\n});\ninitialiseSagaMiddleware.run(rootSaga);","map":{"version":3,"sources":["/home/nik/projects/js/next-blog/redux/store/store.ts"],"names":["createAction","configureStore","createReducer","getDefaultMiddleware","createSagaMiddleware","rootSaga","initialiseSagaMiddleware","middleware","getAllPosts","createComment","createPost","addPost","addComment","apiError","defaulState","posts","error","rootReducer","builder","addCase","state","action","push","payload","pid","findIndex","post","id","postId","comments","store","reducer","run"],"mappings":"AAAA,SACEA,YADF,EAEEC,cAFF,EAGEC,aAHF,EAIEC,oBAJF,QAKO,kBALP;AAMA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAASC,QAAT,QAAyB,UAAzB;AAGA,MAAMC,wBAAwB,GAAGF,oBAAoB,EAArD;AACA,MAAMG,UAAU,GAAG,CAAC,GAAGJ,oBAAoB,EAAxB,EAA4BG,wBAA5B,CAAnB;AAEA,OAAO,MAAME,WAAW,GAAGR,YAAY,CAAQ,UAAR,CAAhC;AACP,OAAO,MAAMS,aAAa,GAAGT,YAAY,CAAa,eAAb,CAAlC;AACP,OAAO,MAAMU,UAAU,GAAGV,YAAY,CAAU,YAAV,CAA/B;AACP,OAAO,MAAMW,OAAO,GAAGX,YAAY,CAAW,SAAX,CAA5B;AACP,OAAO,MAAMY,UAAU,GAAGZ,YAAY,CAAU,YAAV,CAA/B;AACP,OAAO,MAAMa,QAAQ,GAAGb,YAAY,CAAS,YAAT,CAA7B;AAOP,MAAMc,WAAkB,GAAG;AACzBC,EAAAA,KAAK,EAAE,EADkB;AAEzBC,EAAAA,KAAK,EAAE;AAFkB,CAA3B;AAKA,MAAMC,WAAW,GAAGf,aAAa,CAACY,WAAD,EAAeI,OAAD,IAAa;AAC1DA,EAAAA,OAAO,CACJC,OADH,CACWX,WADX,EACwB,CAACY,KAAD,EAAQC,MAAR,KAAmB;AACvCD,IAAAA,KAAK,CAACL,KAAN,CAAYO,IAAZ,CAAiB,GAAGD,MAAM,CAACE,OAA3B;AACD,GAHH,EAIGJ,OAJH,CAIWP,UAJX,EAIuB,CAACQ,KAAD,EAAQC,MAAR,KAAmB;AACtC,UAAMG,GAAG,GAAGJ,KAAK,CAACL,KAAN,CAAYU,SAAZ,CACTC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYN,MAAM,CAACE,OAAP,CAAeK,MAD3B,CAAZ;AAGAR,IAAAA,KAAK,CAACL,KAAN,CAAYS,GAAZ,EAAiBK,QAAjB,CAA0BP,IAA1B,CAA+BD,MAAM,CAACE,OAAtC;AACD,GATH,EAUGJ,OAVH,CAUWR,OAVX,EAUoB,CAACS,KAAD,EAAOC,MAAP,KAAkB;AAClCD,IAAAA,KAAK,CAACL,KAAN,CAAYO,IAAZ,CAAiBD,MAAM,CAACE,OAAxB;AACD,GAZH,EAaGJ,OAbH,CAaWN,QAbX,EAaqB,CAACO,KAAD,EAAQC,MAAR,KAAmB;AACpCD,IAAAA,KAAK,CAACJ,KAAN,GAAcK,MAAM,CAACE,OAArB;AACD,GAfH;AAgBD,CAjBgC,CAAjC;AAmBA,OAAO,MAAMO,KAAK,GAAG7B,cAAc,CAAC;AAAE8B,EAAAA,OAAO,EAAEd,WAAX;AAAwBV,EAAAA;AAAxB,CAAD,CAA5B;AACPD,wBAAwB,CAAC0B,GAAzB,CAA6B3B,QAA7B","sourcesContent":["import {\n  createAction,\n  configureStore,\n  createReducer,\n  getDefaultMiddleware,\n} from \"@reduxjs/toolkit\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { rootSaga } from \"../sagas\";\nimport { RawComment, Comment, Posts,PostType,RawPost } from \"../../lib/types\";\n\nconst initialiseSagaMiddleware = createSagaMiddleware();\nconst middleware = [...getDefaultMiddleware(), initialiseSagaMiddleware];\n\nexport const getAllPosts = createAction<Posts>(\"getPosts\");\nexport const createComment = createAction<RawComment>(\"createComment\");\nexport const createPost = createAction<RawPost>(\"createPost\");\nexport const addPost = createAction<PostType>(\"addPost\")\nexport const addComment = createAction<Comment>(\"addComment\");\nexport const apiError = createAction<string>(\"apiErrored\");\n\nexport type State = {\n  posts: Posts;\n  error: string | null;\n};\n\nconst defaulState: State = {\n  posts: [],\n  error: null,\n};\n\nconst rootReducer = createReducer(defaulState, (builder) => {\n  builder\n    .addCase(getAllPosts, (state, action) => {\n      state.posts.push(...action.payload);\n    })\n    .addCase(addComment, (state, action) => {\n      const pid = state.posts.findIndex(\n        (post) => post.id === action.payload.postId\n      );\n      state.posts[pid].comments.push(action.payload);\n    })\n    .addCase(addPost, (state,action) => {\n      state.posts.push(action.payload)\n    })\n    .addCase(apiError, (state, action) => {\n      state.error = action.payload;\n    });\n});\n\nexport const store = configureStore({ reducer: rootReducer, middleware });\ninitialiseSagaMiddleware.run(rootSaga);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { takeEvery, call, put, all } from \"redux-saga/effects\";\nimport { createComment, createPost, addComment, apiError, addPost } from './store/store';\nimport { postComment, postPost } from '../lib/api';\n\nfunction* commentWorkerSaga(action) {\n  try {\n    const res = yield call(postComment, action.payload);\n    yield put(addComment(res));\n  } catch (e) {\n    yield put(apiError(e));\n  }\n}\n\nfunction* postWorkerSaga(action) {\n  try {\n    const res = yield call(postPost, action.payload);\n\n    const prep = _objectSpread(_objectSpread({}, res), {}, {\n      comments: []\n    });\n\n    yield put(addPost(prep));\n  } catch (e) {\n    yield put(apiError(e));\n  }\n}\n\nfunction* postSaga() {\n  yield takeEvery(createPost, postWorkerSaga);\n}\n\nfunction* commentSaga() {\n  yield takeEvery(createComment, commentWorkerSaga);\n}\n\nexport function* rootSaga() {\n  yield all([postSaga(), commentSaga()]);\n}","map":{"version":3,"sources":["/home/nik/projects/js/next-blog/redux/sagas.ts"],"names":["takeEvery","call","put","all","createComment","createPost","addComment","apiError","addPost","postComment","postPost","commentWorkerSaga","action","res","payload","e","postWorkerSaga","prep","comments","postSaga","commentSaga","rootSaga"],"mappings":";;;;;;AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,GAA/B,QAA0C,oBAA1C;AAEA,SAAQC,aAAR,EAAuBC,UAAvB,EAAmCC,UAAnC,EAA8CC,QAA9C,EAAuDC,OAAvD,QAAqE,eAArE;AACA,SAAQC,WAAR,EAAqBC,QAArB,QAAoC,YAApC;;AAEA,UAAUC,iBAAV,CAA4BC,MAA5B,EAAoC;AAChC,MAAI;AACA,UAAMC,GAAG,GAAG,MAAMZ,IAAI,CAACQ,WAAD,EAAcG,MAAM,CAACE,OAArB,CAAtB;AACA,UAAMZ,GAAG,CAACI,UAAU,CAACO,GAAD,CAAX,CAAT;AACH,GAHD,CAIA,OAAME,CAAN,EAAS;AACL,UAAMb,GAAG,CAACK,QAAQ,CAACQ,CAAD,CAAT,CAAT;AACH;AACJ;;AAED,UAAUC,cAAV,CAAyBJ,MAAzB,EAAgC;AAC5B,MAAI;AACA,UAAMC,GAAG,GAAG,MAAMZ,IAAI,CAACS,QAAD,EAAWE,MAAM,CAACE,OAAlB,CAAtB;;AACA,UAAMG,IAAI,mCAAOJ,GAAP;AAAYK,MAAAA,QAAQ,EAAE;AAAtB,MAAV;;AACA,UAAMhB,GAAG,CAACM,OAAO,CAACS,IAAD,CAAR,CAAT;AACH,GAJD,CAKA,OAAMF,CAAN,EAAS;AACL,UAAMb,GAAG,CAACK,QAAQ,CAACQ,CAAD,CAAT,CAAT;AACH;AACJ;;AAED,UAAUI,QAAV,GAAqB;AACjB,QAAMnB,SAAS,CAACK,UAAD,EAAaW,cAAb,CAAf;AACH;;AAED,UAAUI,WAAV,GAAwB;AACpB,QAAMpB,SAAS,CAACI,aAAD,EAAgBO,iBAAhB,CAAf;AACH;;AAED,OAAO,UAAUU,QAAV,GAAoB;AACvB,QAAMlB,GAAG,CAAC,CACNgB,QAAQ,EADF,EAENC,WAAW,EAFL,CAAD,CAAT;AAIH","sourcesContent":["import { takeEvery, call, put, all } from \"redux-saga/effects\";\nimport {Comment, RawComment} from '../lib/types'\nimport {createComment, createPost, addComment,apiError,addPost} from './store/store'\nimport {postComment, postPost} from '../lib/api'\n\nfunction* commentWorkerSaga(action) {\n    try {\n        const res = yield call(postComment, action.payload)\n        yield put(addComment(res))\n    }\n    catch(e) {\n        yield put(apiError(e))\n    }\n}\n\nfunction* postWorkerSaga(action){\n    try {\n        const res = yield call(postPost, action.payload)\n        const prep = {...res, comments: []}\n        yield put(addPost(prep))\n    }\n    catch(e) {\n        yield put(apiError(e))\n    }\n}\n\nfunction* postSaga() {\n    yield takeEvery(createPost, postWorkerSaga);\n}\n\nfunction* commentSaga() {\n    yield takeEvery(createComment, commentWorkerSaga);\n}\n\nexport function* rootSaga(){\n    yield all([\n        postSaga(),\n        commentSaga()\n      ])\n}"]},"metadata":{},"sourceType":"module"}
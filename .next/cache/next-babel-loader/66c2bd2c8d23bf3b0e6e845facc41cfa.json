{"ast":null,"code":"import { createAction, configureStore, createReducer, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nexport const getAllPosts = createAction(\"getPosts\");\nconst middleware = [...getDefaultMiddleware()];\nconst defaulState = {\n  posts: [],\n  isFetching: false,\n  error: false\n};\nconst rootReducer = createReducer(defaulState, builder => {\n  builder.addCase(getAllPosts, (state, action) => {\n    state.posts.push(...action.payload);\n  });\n});\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware\n});","map":{"version":3,"sources":["/home/nik/projects/js/next-blog/redux/store/store.ts"],"names":["createAction","configureStore","createReducer","getDefaultMiddleware","getAllPosts","middleware","defaulState","posts","isFetching","error","rootReducer","builder","addCase","state","action","push","payload","store","reducer"],"mappings":"AAAA,SACEA,YADF,EAEEC,cAFF,EAGEC,aAHF,EAIEC,oBAJF,QAKO,kBALP;AAQA,OAAO,MAAMC,WAAW,GAAGJ,YAAY,CAAQ,UAAR,CAAhC;AACP,MAAMK,UAAU,GAAG,CAAC,GAAGF,oBAAoB,EAAxB,CAAnB;AAOA,MAAMG,WAAkB,GAAG;AACzBC,EAAAA,KAAK,EAAE,EADkB;AAEzBC,EAAAA,UAAU,EAAE,KAFa;AAGzBC,EAAAA,KAAK,EAAE;AAHkB,CAA3B;AAMA,MAAMC,WAAW,GAAGR,aAAa,CAACI,WAAD,EAAeK,OAAD,IAAa;AAC1DA,EAAAA,OAAO,CAACC,OAAR,CAAgBR,WAAhB,EAA6B,CAACS,KAAD,EAAQC,MAAR,KAAmB;AAC9CD,IAAAA,KAAK,CAACN,KAAN,CAAYQ,IAAZ,CAAiB,GAAGD,MAAM,CAACE,OAA3B;AACD,GAFD;AAGD,CAJgC,CAAjC;AAMA,OAAO,MAAMC,KAAK,GAAGhB,cAAc,CAAC;AAACiB,EAAAA,OAAO,EAACR,WAAT;AAAsBL,EAAAA;AAAtB,CAAD,CAA5B","sourcesContent":["import {\n  createAction,\n  configureStore,\n  createReducer,\n  getDefaultMiddleware,\n} from \"@reduxjs/toolkit\";\nimport { PostType, Posts } from \"../../lib/types\";\n\nexport const getAllPosts = createAction<Posts>(\"getPosts\");\nconst middleware = [...getDefaultMiddleware()];\nexport type State = {\n  posts: Posts;\n  isFetching: boolean;\n  error: boolean;\n};\n\nconst defaulState: State = {\n  posts: [],\n  isFetching: false,\n  error: false,\n};\n\nconst rootReducer = createReducer(defaulState, (builder) => {\n  builder.addCase(getAllPosts, (state, action) => {\n    state.posts.push(...action.payload);\n  });\n});\n\nexport const store = configureStore({reducer:rootReducer, middleware})"]},"metadata":{},"sourceType":"module"}